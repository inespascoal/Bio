{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "\n",
    "# Quase de certeza que não vai funcionar \n",
    "\n",
    "from Servo import *\n",
    "servo=Servo()\n",
    "\n",
    "\n",
    "def forward():\n",
    "    servo.setServoAngle(12,120) \n",
    "    servo.setServoAngle(6,60) \n",
    "    servo.setServoAngle(9,60) \n",
    "    servo.setServoAngle(3,120)\n",
    "    \n",
    "    servo.setServoAngle(2,90) \n",
    "    servo.setServoAngle(5,40)\n",
    "    servo.setServoAngle(10,90)\n",
    "    servo.setServoAngle(13,143)\n",
    "    servo.setServoAngle(7,75)\n",
    "    servo.setServoAngle(8,100)\n",
    "    \n",
    "\n",
    "  \n",
    "\n",
    "# a partir daqui está mesmo mal xd\n",
    "     \n",
    "def backwards():\n",
    "    servo.setServoAngle(4,0)\n",
    "    servo.setServoAngle(3,0)\n",
    "    servo.setServoAngle(2,90)\n",
    "    \n",
    "    servo.setServoAngle(7,0)\n",
    "    servo.setServoAngle(6,0)\n",
    "    servo.setServoAngle(5,90)\n",
    "    \n",
    "    servo.setServoAngle(8,0)\n",
    "    servo.setServoAngle(9,0)\n",
    "    servo.setServoAngle(10,90)\n",
    "    \n",
    "    servo.setServoAngle(11,0)\n",
    "    servo.setServoAngle(12,0)\n",
    "    servo.setServoAngle(13,90)\n",
    "    try:\n",
    "        for i in range(30): \n",
    "            servo.setServoAngle(12,90-i) # anda para a frente uma pata\n",
    "            servo.setServoAngle(6,90-i) # anda para a frente a para de trás contrária\n",
    "            time.sleep(0.001)\n",
    "            \n",
    "        for i in range(30):\n",
    "            servo.setServoAngle(3,90+i) # anda para a frente a outra pata\n",
    "            servo.setServoAngle(9,90+i) # anda para a frente a para de trás correspondente\n",
    "\n",
    "        for i in range(30):\n",
    "            servo.setServoAngle(3,60-2*i) # a 1ª pata volta à posição inicial (como se estivesse sem resistência)\n",
    "            servo.setServoAngle(9,60-i) # o mesmo\n",
    "\n",
    "            servo.setServoAngle(12,120+i) # o correspondente para a outra pata\n",
    "            servo.setServoAngle(6,120+i) # o mesmo\n",
    "            \n",
    "        print (\"\\nEnd of program\")\n",
    "    except KeyboardInterrupt:\n",
    "        print (\"\\nEnd of program\")\n",
    "\n",
    "\n",
    "def right():\n",
    "    servo.setServoAngle(4,0)\n",
    "    servo.setServoAngle(3,0)\n",
    "    servo.setServoAngle(2,90)\n",
    "    \n",
    "    servo.setServoAngle(7,0)\n",
    "    servo.setServoAngle(6,0)\n",
    "    servo.setServoAngle(5,90)\n",
    "    \n",
    "    servo.setServoAngle(8,0)\n",
    "    servo.setServoAngle(9,0)\n",
    "    servo.setServoAngle(10,90)\n",
    "    \n",
    "    servo.setServoAngle(11,0)\n",
    "    servo.setServoAngle(12,0)\n",
    "    servo.setServoAngle(13,90)\n",
    "    try:\n",
    "        for i in range(30): \n",
    "            servo.setServoAngle(4,90-i) # anda para a frente uma pata\n",
    "            servo.setServoAngle(7,90-i) # anda para a frente a para de trás correspondente\n",
    "            time.sleep(0.01)\n",
    "            \n",
    "            for i in range(30):\n",
    "                servo.setServoAngle(11,90-i) # anda para a frente a outra pata\n",
    "                servo.setServoAngle(8,90-i) # anda para a frente a para de trás correspondente\n",
    "\n",
    "                servo.setServoAngle(4,90+i) # a 1ª pata volta à posição inicial (como se estivesse sem resistência)\n",
    "                servo.setServoAngle(7,90+i) # o mesmo\n",
    "                time.sleep(0.01)\n",
    "            \n",
    "            servo.setServoAngle(11,90+i) # o correspondente para a outra pata\n",
    "            servo.setServoAngle(8,90+i) # o mesmo\n",
    "            \n",
    "        print (\"\\nEnd of program\")\n",
    "    except KeyboardInterrupt:\n",
    "        print (\"\\nEnd of program\")\n",
    "        \n",
    "\n",
    "\n",
    "def left():\n",
    "    servo.setServoAngle(4,0)\n",
    "    servo.setServoAngle(3,0)\n",
    "    servo.setServoAngle(2,90)\n",
    "    \n",
    "    servo.setServoAngle(7,0)\n",
    "    servo.setServoAngle(6,0)\n",
    "    servo.setServoAngle(5,90)\n",
    "    \n",
    "    servo.setServoAngle(8,0)\n",
    "    servo.setServoAngle(9,0)\n",
    "    servo.setServoAngle(10,90)\n",
    "    \n",
    "    servo.setServoAngle(11,0)\n",
    "    servo.setServoAngle(12,0)\n",
    "    servo.setServoAngle(13,90)\n",
    "    try:\n",
    "        for i in range(30): \n",
    "            servo.setServoAngle(11,90-i) # anda para a frente uma pata\n",
    "            servo.setServoAngle(8,90-i) # anda para a frente a para de trás correspondente\n",
    "            time.sleep(0.01)\n",
    "            \n",
    "            for i in range(30):\n",
    "                servo.setServoAngle(4,90-i) # anda para a frente a outra pata\n",
    "                servo.setServoAngle(7,90-i) # anda para a frente a para de trás correspondente\n",
    "\n",
    "                servo.setServoAngle(11,90+i) # a 1ª pata volta à posição inicial (como se estivesse sem resistência)\n",
    "                servo.setServoAngle(8,90+i) # o mesmo\n",
    "                time.sleep(0.01)\n",
    "            \n",
    "            servo.setServoAngle(4,90+i) # o correspondente para a outra pata\n",
    "            servo.setServoAngle(7,90+i) # o mesmo\n",
    "            \n",
    "        print (\"\\nEnd of program\")\n",
    "    except KeyboardInterrupt:\n",
    "        print (\"\\nEnd of program\")\n",
    "\n",
    "\n",
    "        \n",
    "# Main program logic follows:\n",
    "if __name__ == '__main__':\n",
    "\n",
    "    print ('Program is starting ... ')\n",
    "    import sys\n",
    "    if len(sys.argv)<2:\n",
    "        print (\"Parameter error: Please assign the device\")\n",
    "        exit() \n",
    "    if sys.argv[1] == 'Forward':\n",
    "        forward()\n",
    "    elif sys.argv[1] == 'Backwards':\n",
    "        backwards()\n",
    "    elif sys.argv[1] == 'Right': \n",
    "        right()              \n",
    "    elif sys.argv[1] == 'Left':   \n",
    "        left() \n",
    "\n"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.5"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
